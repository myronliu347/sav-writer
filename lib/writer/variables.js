"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toArray = exports.types = exports.measures = exports.alignments = void 0;
const moment = require("moment");
const utilities_1 = require("../utilities");
var alignments;
(function (alignments) {
    alignments[alignments["Centre"] = 2] = "Centre";
    alignments[alignments["Left"] = 0] = "Left";
    alignments[alignments["Right"] = 1] = "Right";
})(alignments = exports.alignments || (exports.alignments = {}));
var measures;
(function (measures) {
    measures[measures["Continuous"] = 3] = "Continuous";
    measures[measures["Nominal"] = 1] = "Nominal";
    measures[measures["Ordinal"] = 2] = "Ordinal";
})(measures = exports.measures || (exports.measures = {}));
var types;
(function (types) {
    types[types["Date"] = 20] = "Date";
    types[types["DateTime"] = 22] = "DateTime";
    types[types["Numeric"] = 5] = "Numeric";
    types[types["String"] = 1] = "String";
})(types = exports.types || (exports.types = {}));
function toArray(variables, ncases, { bias }) {
    validate(variables);
    shortNames(variables);
    const arr = [
        fileHeaderRecord(variables, ncases, bias),
        variableRecord(variables),
        valueLabelsRecord(variables),
        machineIntegerInfoRecord(),
        machineFloatingPointInfoRecord(),
        variableDisplayParameterRecord(variables),
        longVariableNamesRecord(variables),
        longStringValueLabelsRecord(variables),
        characterEncodingRecord(),
        dictionaryTerminationRecord(),
    ];
    return arr.flat();
}
exports.toArray = toArray;
function characterEncodingRecord() {
    return [
        { type: utilities_1.BufferType.Int32, value: 7 },
        { type: utilities_1.BufferType.Int32, value: 20 },
        { type: utilities_1.BufferType.Int32, value: 1 },
        { type: utilities_1.BufferType.Int32, value: 5 },
        { type: utilities_1.BufferType.String, value: 'UTF-8' }, // encoding
    ];
}
function dictionaryTerminationRecord() {
    return [
        { type: utilities_1.BufferType.Int32, value: 999 },
        { type: utilities_1.BufferType.Int32, value: 0 }, // filler
    ];
}
function fileHeaderRecord(variables, ncases, bias) {
    return [
        { type: utilities_1.BufferType.String, value: '$FL2' },
        { length: 60, type: utilities_1.BufferType.String, value: '@(#) SPSS DATA FILE - DingtalkSurvey' },
        { type: utilities_1.BufferType.Int32, value: 2 },
        { type: utilities_1.BufferType.Int32, value: variables.map((v) => (v.type === types.String ? Math.ceil(v.width / 8) : 1)).reduce((a, b) => a + b) },
        { type: utilities_1.BufferType.Int32, value: 1 },
        { type: utilities_1.BufferType.Int32, value: 0 },
        { type: utilities_1.BufferType.Int32, value: ncases },
        { type: utilities_1.BufferType.Float, value: bias },
        { type: utilities_1.BufferType.String, value: moment().format('DD MMM YY'), length: 9 },
        { type: utilities_1.BufferType.String, value: moment().format('HH:mm:ss'), length: 8 },
        { length: 64, type: utilities_1.BufferType.String, value: 'FILE GENERATED BY DingtalkSurvey' },
        { type: utilities_1.BufferType.Int8, value: 0 },
        { type: utilities_1.BufferType.Int8, value: 0 },
        { type: utilities_1.BufferType.Int8, value: 0 }, // padding
    ];
}
function longStringValueLabelsRecord(variables) {
    const valueLabels = utilities_1.buffer.write(variables.map((variable) => {
        if (!variable.valueLabels || !variable.valueLabels.length)
            return undefined;
        if (variable.type !== types.String || Math.ceil(variable.width / 8) === 1)
            return undefined;
        return [
            { type: utilities_1.BufferType.Int32, value: variable.short.length },
            { type: utilities_1.BufferType.String, value: variable.short },
            { type: utilities_1.BufferType.Int32, value: variable.width },
            { type: utilities_1.BufferType.Int32, value: variable.valueLabels.length }, // n_labels
        ].concat(...variable.valueLabels.map(({ label, value }) => ([
            { type: utilities_1.BufferType.Int32, value: variable.width },
            { length: variable.width, type: utilities_1.BufferType.String, value },
            { type: utilities_1.BufferType.Int32, value: Buffer.byteLength(label, 'utf8') },
            { type: utilities_1.BufferType.String, value: label }, // label[]
        ])));
    }).filter((valueLabel) => !!valueLabel).flat());
    return valueLabels.length ? [
        { type: utilities_1.BufferType.Int32, value: 7 },
        { type: utilities_1.BufferType.Int32, value: 21 },
        { type: utilities_1.BufferType.Int32, value: 1 },
        { type: utilities_1.BufferType.Int32, value: valueLabels.length },
        { type: utilities_1.BufferType.Buffer, value: valueLabels }, // var_value_labels[]
    ] : [];
}
function longVariableNamesRecord(variables) {
    const pairs = utilities_1.buffer.write(variables.map((variable) => [
        { type: utilities_1.BufferType.String, value: variable.short },
        { type: utilities_1.BufferType.String, value: '=' },
        { type: utilities_1.BufferType.String, value: variable.name },
        { type: utilities_1.BufferType.Int8, value: 9 }, // separator
    ]).flat().slice(0, -1));
    return [
        { type: utilities_1.BufferType.Int32, value: 7 },
        { type: utilities_1.BufferType.Int32, value: 13 },
        { type: utilities_1.BufferType.Int32, value: 1 },
        { type: utilities_1.BufferType.Int32, value: pairs.length },
        { type: utilities_1.BufferType.Buffer, value: pairs }, // var_name_pairs[]
    ];
}
function machineFloatingPointInfoRecord() {
    return [
        { type: utilities_1.BufferType.Int32, value: 7 },
        { type: utilities_1.BufferType.Int32, value: 4 },
        { type: utilities_1.BufferType.Int32, value: 8 },
        { type: utilities_1.BufferType.Int32, value: 3 },
        { type: utilities_1.BufferType.Float, value: -Number.MAX_VALUE },
        { type: utilities_1.BufferType.Float, value: Number.MAX_VALUE },
        { type: utilities_1.BufferType.Float, value: -Number.MAX_VALUE }, // lowest
    ];
}
function machineIntegerInfoRecord() {
    return [
        { type: utilities_1.BufferType.Int32, value: 7 },
        { type: utilities_1.BufferType.Int32, value: 3 },
        { type: utilities_1.BufferType.Int32, value: 4 },
        { type: utilities_1.BufferType.Int32, value: 8 },
        { type: utilities_1.BufferType.Int32, value: 1 },
        { type: utilities_1.BufferType.Int32, value: 2 },
        { type: utilities_1.BufferType.Int32, value: 0 },
        { type: utilities_1.BufferType.Int32, value: -1 },
        { type: utilities_1.BufferType.Int32, value: 1 },
        { type: utilities_1.BufferType.Int32, value: 1 },
        { type: utilities_1.BufferType.Int32, value: 2 },
        { type: utilities_1.BufferType.Int32, value: 65001 }, // character_code
    ];
}
function shortNames(variables) {
    variables.forEach((variable) => {
        let index = 0;
        let short = variable.name.toUpperCase().substring(0, 8);
        const shorts = variables.map((v) => v.short);
        while (shorts.includes(short)) {
            index += 1;
            short = `${short.slice(0, short.length - index.toString().length)}${index}`;
        }
        variable.short = short; // eslint-disable-line no-param-reassign
    });
}
function validate(variables) {
    variables.forEach((variable) => {
        if (!variable.name || !variable.name.length)
            throw new Error('Variable name can\'t be empty.');
        if (variable.name.length > 64)
            throw new Error('Variable name can\'t exceed 64 characters.');
        if (!variable.name.match(/^[a-z@][a-z0-9!._#@$]*[^.]$/i))
            throw new Error('Variable name doesn\'t meet the SPSS requirements.');
        if (!variable.type)
            throw new Error('Variable type can\'t be empty.');
        Object.assign(variable, { alignment: variable.alignment || alignments.Right, label: variable.label || variable.name, measure: variable.measure || measures.Continuous });
        switch (variable.type) { // eslint-disable-line default-case
            case types.Date:
                Object.assign(variable, { columns: 10, decimal: 0, width: 10 });
                break;
            case types.DateTime:
                Object.assign(variable, { columns: 19, decimal: 0, width: 19 });
                break;
            case types.Numeric:
                Object.assign(variable, { decimal: variable.decimal === undefined ? 2 : variable.decimal, width: variable.width || 8 });
                Object.assign(variable, { columns: variable.columns || variable.decimal + variable.width });
                break;
            case types.String:
                Object.assign(variable, { columns: variable.columns || variable.width || 8, decimal: 0, width: variable.width || 8 });
                break;
        }
        if (variable.decimal < 0 || variable.decimal > 16)
            throw new Error('Variable decimal must be between 0 and 16.');
        if (variable.width < 0 || variable.width > 32767)
            throw new Error('Variable width must be between 0 and 32767.');
        if (variable.type !== types.String && variable.width > 40)
            throw new Error(`Variable width must be between 1 and 40 for type ${variable.type}.`);
        if (variable.width <= variable.decimal)
            throw new Error('Variable width can\'t be less or equal to variable decimal.');
    });
}
function valueLabelsRecord(variables) {
    let index = 0;
    return variables.map((variable) => {
        index += variable.type === types.String ? Math.ceil(variable.width / 8) : 1;
        if (!variable.valueLabels || !variable.valueLabels.length)
            return undefined;
        if (variable.type === types.String && Math.ceil(variable.width / 8) > 1)
            return undefined;
        return [
            { type: utilities_1.BufferType.Int32, value: 3 },
            { type: utilities_1.BufferType.Int32, value: variable.valueLabels.length }, // label_count
        ].concat(...variable.valueLabels.map(({ label, value }) => {
            let $label = label;
            let labelByteLength = Buffer.byteLength($label, 'utf8');
            while (labelByteLength > 255) {
                $label = label.substring(0, $label.length - 1);
                labelByteLength = Buffer.byteLength($label, 'utf8');
            }
            return [
                (variable.type === types.Numeric && { type: utilities_1.BufferType.Float, value: +value }) || { length: 8, type: utilities_1.BufferType.String, value },
                { type: utilities_1.BufferType.Int8, value: labelByteLength },
                { length: roundUp(labelByteLength + 1, 8) - 1, type: utilities_1.BufferType.String, value: $label }, // label[]
            ];
        })).concat([
            { type: utilities_1.BufferType.Int32, value: 4 },
            { type: utilities_1.BufferType.Int32, value: 1 },
            { type: utilities_1.BufferType.Int32, value: index }, // vars[]
        ]);
    }).filter((variable) => !!variable).flat();
}
function variableDisplayParameterRecord(variables) {
    return [
        { type: utilities_1.BufferType.Int32, value: 7 },
        { type: utilities_1.BufferType.Int32, value: 11 },
        { type: utilities_1.BufferType.Int32, value: 4 },
        { type: utilities_1.BufferType.Int32, value: variables.length * 3 }, // count
    ].concat(...variables.map((variable) => ([
        { type: utilities_1.BufferType.Int32, value: variable.measure },
        { type: utilities_1.BufferType.Int32, value: variable.columns },
        { type: utilities_1.BufferType.Int32, value: variable.alignment }, // alignment
    ])));
}
function variableRecord(variables) {
    return variables.map((variable) => {
        let label = variable.label;
        let labelByteLength = Buffer.byteLength(label, 'utf8');
        while (labelByteLength > 255) {
            label = label.substring(0, label.length - 1);
            labelByteLength = Buffer.byteLength(label, 'utf8');
        }
        return [
            { type: utilities_1.BufferType.Int32, value: 2 },
            { type: utilities_1.BufferType.Int32, value: variable.type === types.String ? variable.width : 0 },
            { type: utilities_1.BufferType.Int32, value: variable.label && variable.label.length ? 1 : 0 },
            { type: utilities_1.BufferType.Int32, value: 0 },
            { type: utilities_1.BufferType.Int32, value: variable.type * 65536 + variable.width * 256 + variable.decimal },
            { type: utilities_1.BufferType.Int32, value: variable.type * 65536 + variable.width * 256 + variable.decimal },
            { length: 8, type: utilities_1.BufferType.String, value: variable.short },
            { type: utilities_1.BufferType.Int32, value: labelByteLength },
            { length: roundUp(labelByteLength, 4), type: utilities_1.BufferType.String, value: label }, // label[]
        ].concat(...variable.type === types.String ? Array.from({ length: Math.ceil(variable.width / 8) - 1 }).map(() => [
            { type: utilities_1.BufferType.Int32, value: 2 },
            { type: utilities_1.BufferType.Int32, value: -1 },
            { type: utilities_1.BufferType.Float, value: 0 },
            { type: utilities_1.BufferType.Float, value: 0 },
            { type: utilities_1.BufferType.Float, value: 0 }, // ignored
        ]) : []);
    }).flat();
}
function roundUp(x, y) {
    return Math.ceil(x / y) * y;
}
//# sourceMappingURL=data:application/json;base64,